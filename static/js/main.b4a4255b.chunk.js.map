{"version":3,"sources":["components/card/addCard.tsx","components/modals/editCardModal.tsx","components/card/card.tsx","components/card/cardList.tsx","components/navbar/navBar.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["AddOne","_ref","isAddingOneFromProps","isAddingOne","onToggle","onSaveFromProps","onSave","addingFor","_useState","useState","_useState2","_slicedToArray","setIsAddignOne","_useState3","_useState4","title","setTitle","useEffect","toggleBtn","prev","_jsxs","className","children","_jsx","type","placeholder","autoFocus","value","onChange","e","target","onKeyPress","key","onClick","href","EditCardModal","cardFromProps","card","onClose","cloneDeep","setCard","titleIsOpen","setTitleIsOpen","_useState5","_useState6","comment","setComment","_useState7","_useState8","descriptionIsOpen","setDescriptionIsOpen","name","_objectSpread","_defineProperty","Modal","isOpen","onRequestClose","overlayClassName","appElement","document","getElementById","description","priority","Scrollbars","autoHeight","autoHeightMin","autoHeightMax","renderThumbVertical","_ref2","style","props","_objectWithoutProperties","_excluded","backgroundColor","borderRadius","comments","map","i","index","splice","push","Card","deleteCard","expandCard","getTitleColor","classNames","join","Draggable","draggableId","id","dragHandleProps","draggableProps","innerRef","ref","length","concat","List","_ref$list","list","listFromProps","updateDashBoard","onDelete","setList","isAddingCard","setIsAddingCard","expandedCard","setExpandedCard","moveCard","dragIndex","hoverIndex","mutatedList","dragCard","cards","filter","eachCard","Droppable","droppableId","droppableProps","_ref3","onMouseDown","preventDefault","listId","AddCard","_toConsumableArray","Date","getTime","arguments","undefined","NavBar","titleInfo","onEnter","dashboardList","onDashboardChange","selectedBoard","showAddInput","setShowAddInput","Title","useMemo","version","onClickAdd","dashboard","App","_dashboard$selectedBo","setDashboard","setSelectedBoard","getMockData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","next","fetch","process","then","json","sent","Object","keys","stop","apply","deleteList","eachList","mutatedDashboard","lists","onDragEnd","useCallback","result","destination","source","destList","listToMutate","find","Number","cardToMutate","_ref4","each","_destList","renderThumbHorizontal","_ref5","DragDropContext","currBoard","_Fragment","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b4a4255b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\ninterface Props {\r\n  isAddingOne?: boolean;\r\n  onToggle?: (toggle: boolean) => void;\r\n  onSave?: (title: string) => void;\r\n  addingFor: string;\r\n}\r\n\r\nconst AddOne: React.FC<Props> = ({\r\n  isAddingOne: isAddingOneFromProps,\r\n  onToggle,\r\n  onSave: onSaveFromProps,\r\n  addingFor,\r\n}) => {\r\n  const [isAddingOne, setIsAddignOne] = useState(isAddingOneFromProps);\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setIsAddignOne(isAddingOneFromProps);\r\n  }, [isAddingOneFromProps]);\r\n\r\n  const toggleBtn = () => {\r\n    setIsAddignOne((prev) => !prev);\r\n    onToggle?.(!isAddingOne);\r\n  };\r\n\r\n  const onTitleChange = (e) => setTitle(e.target.value);\r\n\r\n  const onSave = () => {\r\n    onSaveFromProps?.(title);\r\n    onToggle?.(false);\r\n    setTitle(\"\");\r\n    setIsAddignOne(false);\r\n  };\r\n\r\n  const onEnterPress = (e) => {\r\n    if (e.key === \"Enter\" && title) {\r\n      onSave();\r\n    }\r\n  };\r\n\r\n  return isAddingOne ? (\r\n    <div className=\"add-one-mini\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder={addingFor}\r\n        autoFocus\r\n        value={title}\r\n        onChange={onTitleChange}\r\n        onKeyPress={onEnterPress}\r\n      />\r\n      <div>\r\n        <button className=\"btn-c blue\" onClick={title ? onSave : null}>\r\n          &#x2714;\r\n        </button>\r\n        <button className=\"btn-c red\" onClick={toggleBtn}>\r\n          &#x2716;\r\n        </button>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <a href=\"/#\" className=\"add-one-element\" onClick={toggleBtn}>\r\n      {addingFor}\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default AddOne;\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport Modal from \"react-modal\";\r\nimport \"./editCardModal.css\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport { CardType } from \"../../types\";\r\n\r\ninterface Props {\r\n  card: CardType;\r\n  onClose: (cardToSave?: CardType) => void;\r\n}\r\n\r\nconst EditCardModal: React.FC<Props> = ({ card: cardFromProps, onClose }) => {\r\n  const [card, setCard] = useState(cloneDeep(cardFromProps));\r\n  const [titleIsOpen, setTitleIsOpen] = useState(false);\r\n  const [comment, setComment] = useState(\"\");\r\n  const [descriptionIsOpen, setDescriptionIsOpen] = useState(false);\r\n\r\n  const deleteComment = (index: number) =>\r\n    setCard((prev) => ({\r\n      ...prev,\r\n      comments: prev.comments.splice(index, 1),\r\n    }));\r\n\r\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) =>\r\n    setComment(e.target.value);\r\n\r\n  const addComment: React.KeyboardEventHandler<HTMLInputElement> = (e) => {\r\n    if (e.key === \"Enter\" && comment) {\r\n      setCard((prev) => ({\r\n        ...prev,\r\n        comment: prev.comments.push(comment),\r\n      }));\r\n      setComment(\"\");\r\n    }\r\n  };\r\n\r\n  const onSave = () => onClose?.(card);\r\n\r\n  const onChange = (e) => {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n\r\n    setCard((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={true}\r\n      onRequestClose={onClose}\r\n      className=\"Modal\"\r\n      overlayClassName=\"Overlay\"\r\n      appElement={document.getElementById(\"root\")}\r\n    >\r\n      <div className=\"edit-modal-title\">\r\n        {titleIsOpen ? (\r\n          <input\r\n            type=\"text\"\r\n            className=\"on-edit-modal-title\"\r\n            name=\"title\"\r\n            onChange={onChange}\r\n            value={card.title}\r\n          />\r\n        ) : (\r\n          <h2>{card.title}</h2>\r\n        )}\r\n        <span\r\n          className={titleIsOpen ? \"close\" : \"edit\"}\r\n          onClick={() => setTitleIsOpen((prev) => !prev)}\r\n        ></span>\r\n      </div>\r\n      <div>\r\n        <label className=\"model-label\">description</label>\r\n        <div className=\"card-desc\">\r\n          {descriptionIsOpen ? (\r\n            <textarea\r\n              value={card.description}\r\n              onChange={onChange}\r\n              name=\"description\"\r\n              className=\"edit-text-area\"\r\n            />\r\n          ) : (\r\n            <i>{card.description}</i>\r\n          )}\r\n          <span\r\n            className={descriptionIsOpen ? \"close\" : \"edit\"}\r\n            onClick={() => setDescriptionIsOpen((prev) => !prev)}\r\n          ></span>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <label className=\"model-label\">status</label>\r\n        <select\r\n          value={card.priority}\r\n          name=\"priority\"\r\n          onChange={onChange}\r\n          className=\"select-list status-list\"\r\n        >\r\n          <option value={0}>new</option>\r\n          <option value={1}>investigate</option>\r\n          <option value={2}>in-progress</option>\r\n          <option value={3}>done</option>\r\n          <option value={4}>critical</option>\r\n          <option value={5}>hold</option>\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <label className=\"model-label\">comments</label>\r\n        <div className=\"card-comment-container\">\r\n          <Scrollbars\r\n            className=\"scroll\"\r\n            autoHeight\r\n            autoHeightMin={0}\r\n            autoHeightMax={200}\r\n            renderThumbVertical={({ style, ...props }) => (\r\n              <div\r\n                {...props}\r\n                style={{\r\n                  ...style,\r\n                  backgroundColor: \"rgba(49, 49, 49, 0.4)\",\r\n                  borderRadius: \"3px\",\r\n                }}\r\n              />\r\n            )}\r\n          >\r\n            {card.comments.map((comment, i) => (\r\n              <span className=\"comment\" key={i}>\r\n                <i>{comment}</i>\r\n                <span\r\n                  className=\"comment-delete\"\r\n                  onClick={() => deleteComment(i)}\r\n                >\r\n                  &#x2716;\r\n                </span>\r\n              </span>\r\n            ))}\r\n          </Scrollbars>\r\n          <input\r\n            type=\"text\"\r\n            value={comment}\r\n            className=\"add-comment\"\r\n            placeholder=\"type and press enter to add comment\"\r\n            onChange={onInputChange}\r\n            onKeyPress={addComment}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <button className=\"btn-c blue\" onClick={onSave}>\r\n          &#x2714;\r\n        </button>\r\n        <button className=\"btn-c red\" onClick={() => onClose?.()}>\r\n          &#x2716;\r\n        </button>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EditCardModal;\r\n","import React from \"react\";\r\nimport { CardType } from \"../../types\";\r\nimport \"./card.css\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n\r\ninterface Props {\r\n  index: number;\r\n  listId: number;\r\n  card: CardType;\r\n  expandCard: () => void;\r\n  deleteCard: (id: number) => void;\r\n  moveCard: any;\r\n}\r\n\r\nconst Card: React.FC<Props> = ({ card, deleteCard, expandCard, index }) => {\r\n  const getTitleColor = (priority) => {\r\n    let classNames = [\"card-title\"];\r\n\r\n    switch (priority + \"\") {\r\n      case \"1\":\r\n        classNames.push(\"investigate\");\r\n        break;\r\n      case \"2\":\r\n        classNames.push(\"in-progress\");\r\n        break;\r\n      case \"3\":\r\n        classNames.push(\"done\");\r\n        break;\r\n      case \"4\":\r\n        classNames.push(\"critical\");\r\n        break;\r\n      case \"5\":\r\n        classNames.push(\"hold\");\r\n        break;\r\n      default:\r\n        classNames.push(\"new\");\r\n        break;\r\n    }\r\n\r\n    return classNames.join(\" \");\r\n  };\r\n\r\n  return (\r\n    <Draggable draggableId={card.id + \"\"} key={card.id + \"\"} index={index}>\r\n      {({ dragHandleProps, draggableProps, innerRef }) => (\r\n        <div\r\n          ref={innerRef}\r\n          className=\"card\"\r\n          onClick={expandCard}\r\n          {...dragHandleProps}\r\n          {...draggableProps}\r\n        >\r\n          <div className={getTitleColor(card.priority)}>\r\n            <span> {card.title} </span>\r\n            <span onClick={() => deleteCard(card.id)}>&#x2716;</span>\r\n          </div>\r\n          <div className=\"card-comment-count\" title={card.description}>\r\n            {card.comments.length ? (\r\n              <i>{`${card.comments.length} comment(s)`}</i>\r\n            ) : (\r\n              <i>Be the first to comment</i>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { cloneDeep } from \"lodash\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport { CardType, DashBoardDataType } from \"../../types\";\r\nimport EditCardModal from \"../modals/editCardModal\";\r\nimport AddCard from \"./addCard\";\r\nimport Card from \"./card\";\r\nimport \"./cardList.css\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\n\r\ninterface Props {\r\n  list: DashBoardDataType[0][0] | null;\r\n  updateDashBoard: (data: DashBoardDataType[0][0]) => void;\r\n  onDelete: (id: number) => void;\r\n}\r\n\r\nconst List: React.FC<Props> = ({\r\n  list: listFromProps = null,\r\n  updateDashBoard,\r\n  onDelete,\r\n}) => {\r\n  const [list, setList] = useState(listFromProps);\r\n  const [isAddingCard, setIsAddingCard] = useState(false);\r\n  const [expandedCard, setExpandedCard] = useState<CardType | null>(null);\r\n\r\n  useEffect(() => {\r\n    listFromProps && setList(listFromProps);\r\n  }, [listFromProps]);\r\n\r\n  const addCard = (title: string) => {\r\n    setList((prev) => ({\r\n      ...prev,\r\n      cards: [\r\n        ...prev.cards,\r\n        {\r\n          id: new Date().getTime(),\r\n          title,\r\n          priority: 0,\r\n          description: \"\",\r\n          comments: [],\r\n        },\r\n      ],\r\n    }));\r\n\r\n    updateDashBoard(list);\r\n  };\r\n\r\n  const closeModal = (card: CardType | null = null) => {\r\n    let mutatedList = cloneDeep(list);\r\n\r\n    if (card) {\r\n      mutatedList.cards = mutatedList.cards.map((eachCard) => {\r\n        if (eachCard.id === card.id) return card;\r\n        return eachCard;\r\n      });\r\n    }\r\n\r\n    setExpandedCard(null);\r\n    updateDashBoard(mutatedList);\r\n  };\r\n\r\n  const moveCard = (dragIndex: number, hoverIndex: number) => {\r\n    let mutatedList = cloneDeep(list);\r\n    const dragCard = mutatedList.cards[dragIndex];\r\n    mutatedList.cards.splice(dragIndex, 1);\r\n    mutatedList.cards.splice(hoverIndex, 0, dragCard);\r\n    updateDashBoard(mutatedList);\r\n  };\r\n\r\n  const deleteCard = (id: number) => {\r\n    let mutatedList = cloneDeep(list);\r\n    mutatedList.cards = mutatedList.cards.filter(\r\n      (eachCard) => eachCard.id !== id\r\n    );\r\n    updateDashBoard(mutatedList);\r\n  };\r\n\r\n  const onToggle = () => setIsAddingCard((prev) => !prev);\r\n\r\n  return (\r\n    <div className=\"list\">\r\n      <div className=\"title-container\">\r\n        <span>{list.title}</span>\r\n        <span className=\"btn-c red\" onClick={() => onDelete(list.id)}>\r\n          &#x2716;\r\n        </span>\r\n      </div>\r\n      <Droppable droppableId={list.id + \"\"} key={list.id + \"\"}>\r\n        {({ innerRef, droppableProps, placeholder }) => (\r\n          <div ref={innerRef} {...droppableProps} className=\"card-container\">\r\n            <Scrollbars\r\n              className=\"scroll\"\r\n              autoHeight\r\n              autoHeightMin={0}\r\n              autoHeightMax={\r\n                isAddingCard ? \"calc(100vh - 220px)\" : \"calc(100vh - 165px)\"\r\n              }\r\n              renderThumbVertical={({ style, ...props }) => (\r\n                <div\r\n                  {...props}\r\n                  style={{\r\n                    ...style,\r\n                    backgroundColor: \"rgba(49, 49, 49, 0.4)\",\r\n                    borderRadius: \"3px\",\r\n                  }}\r\n                />\r\n              )}\r\n            >\r\n              {!list.cards.length && (\r\n                <div\r\n                  className=\"no-card\"\r\n                  onMouseDown={(e) => e.preventDefault()}\r\n                >\r\n                  <i>No Card(s) available</i>\r\n                </div>\r\n              )}\r\n              {list.cards.map((eachCard, i) => (\r\n                <Card\r\n                  index={i}\r\n                  listId={list.id}\r\n                  deleteCard={deleteCard}\r\n                  expandCard={() => setExpandedCard(eachCard)}\r\n                  moveCard={moveCard}\r\n                  card={eachCard}\r\n                  key={i}\r\n                />\r\n              ))}\r\n              {placeholder}\r\n            </Scrollbars>\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n      <div className=\"btn-container\">\r\n        <AddCard\r\n          addingFor=\"add a card...\"\r\n          onSave={addCard}\r\n          onToggle={onToggle}\r\n        />\r\n      </div>\r\n      {expandedCard && (\r\n        <EditCardModal card={expandedCard} onClose={closeModal} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { ChangeEvent, useMemo, useState } from \"react\";\r\nimport \"./nav.css\";\r\nimport { TitleType } from \"../../types\";\r\n\r\ninterface Props {\r\n  titleInfo?: TitleType;\r\n  onEnter?: any;\r\n  dashboardList: string[];\r\n  onDashboardChange: any;\r\n  selectedBoard?: string;\r\n}\r\n\r\nconst NavBar: React.FC<Props> = ({\r\n  titleInfo,\r\n  onEnter,\r\n  dashboardList,\r\n  onDashboardChange,\r\n  selectedBoard,\r\n}) => {\r\n  const [showAddInput, setShowAddInput] = useState(false);\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const Title = useMemo(() => {\r\n    let title = \"Trello\",\r\n      version = \"2.0\";\r\n    if (titleInfo) {\r\n      title = titleInfo.title;\r\n      version = titleInfo.version;\r\n    }\r\n    return (\r\n      <div className=\"nav-title\">\r\n        <span>{title}</span>\r\n        {version && <span>{version}</span>}\r\n      </div>\r\n    );\r\n  }, [titleInfo]);\r\n\r\n  const onClickAdd = () => {\r\n    setShowAddInput((prev) => !prev);\r\n    setTitle(\"\");\r\n  };\r\n\r\n  const onTitleChange = (e: ChangeEvent<HTMLInputElement>) =>\r\n    setTitle(e.target.value);\r\n\r\n  const onEnterPress: React.KeyboardEventHandler<HTMLInputElement> = (e) => {\r\n    if (e.key === \"Enter\" && title) {\r\n      onEnter?.(title);\r\n      onClickAdd();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"navbar\">\r\n      {Title}\r\n      <div className=\"nav-right\">\r\n        {showAddInput ? (\r\n          <div className=\"add-board\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"type and press to add dashboard\"\r\n              value={title}\r\n              onChange={onTitleChange}\r\n              onKeyPress={onEnterPress}\r\n            />\r\n            <button className=\"btn-c red\" onClick={onClickAdd}>\r\n              &#x2716;\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <button className=\"btn-c add\" onClick={onClickAdd}>\r\n            <span>add dashboard</span>\r\n          </button>\r\n        )}\r\n        {dashboardList.length ? (\r\n          <select\r\n            onChange={onDashboardChange}\r\n            className=\"select-list dashboard-list\"\r\n            value={selectedBoard}\r\n          >\r\n            {dashboardList.map((dashboard, i) => (\r\n              <option key={i} value={dashboard}>\r\n                {dashboard + \" dashboard\"}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { cloneDeep } from \"lodash\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { DragDropContext, OnDragEndResponder } from \"react-beautiful-dnd\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport \"./App.css\";\nimport { AddCard, List, NavBar } from \"./components\";\nimport { DashBoardDataType, TitleType } from \"./types\";\n\nconst App: React.FC = () => {\n  const [titleInfo] = useState<TitleType>({\n    title: \"Trello\",\n    version: \"2.0\",\n  });\n  const [dashboard, setDashboard] = useState<DashBoardDataType>({});\n  const [selectedBoard, setSelectedBoard] = useState(\"\");\n\n  const getMockData = async () => {\n    const data = await fetch(process.env.PUBLIC_URL + \"/mock-data.json\").then(\n      (data) => data.json()\n    );\n    setDashboard(data);\n    setSelectedBoard(Object.keys(data)[0]);\n  };\n\n  const addList = (title: string) => {\n    const mutatedDashboard = cloneDeep(dashboard);\n    let currBoard = selectedBoard ?? \"default\";\n\n    if (!mutatedDashboard[currBoard]) {\n      currBoard = \"default\";\n      mutatedDashboard[currBoard] = [];\n    }\n\n    mutatedDashboard[currBoard].push({\n      id: new Date().getTime(),\n      title,\n      cards: [],\n    });\n\n    setDashboard(mutatedDashboard);\n    setSelectedBoard(currBoard);\n  };\n\n  const deleteList = (id: number) =>\n    setDashboard((prev) => ({\n      ...prev,\n      [selectedBoard]: prev[selectedBoard].filter(\n        (eachList) => eachList.id !== id\n      ),\n    }));\n\n  const onDashboardChange = (e) => setSelectedBoard(e.target.value);\n\n  const updateDashBoard = (list: DashBoardDataType[0][0]) => {\n    let mutatedDashboard = cloneDeep(dashboard);\n    let lists = mutatedDashboard[selectedBoard].map((eachList) => {\n      if (eachList.id === list.id) return list;\n      return eachList;\n    });\n    mutatedDashboard[selectedBoard] = lists;\n    setDashboard(mutatedDashboard);\n  };\n\n  const onDashBoardTitleSave = (title: string) => {\n    let mutatedDashboard = cloneDeep(dashboard);\n    mutatedDashboard[title] = [];\n    setDashboard(mutatedDashboard);\n    setSelectedBoard(title);\n  };\n\n  const deleteBoard = () => {\n    let mutatedDashboard = cloneDeep(dashboard);\n    delete mutatedDashboard[selectedBoard];\n    setDashboard(mutatedDashboard);\n    setSelectedBoard(Object.keys(mutatedDashboard)[0]);\n  };\n\n  const onDragEnd: OnDragEndResponder = useCallback(\n    (result) => {\n      const { destination, source, draggableId } = result;\n      if (!destination) {\n        return;\n      }\n\n      if (\n        destination.droppableId === source.droppableId &&\n        destination.index === source.index\n      ) {\n        return;\n      }\n\n      setDashboard((prev) => {\n        let destList: DashBoardDataType[0][0] = null;\n        const listToMutate = prev[selectedBoard].find(\n          ({ id }) => id === Number(source.droppableId)\n        );\n        const cardToMutate = listToMutate.cards.find(\n          ({ id }) => id === Number(draggableId)\n        );\n\n        listToMutate.cards.splice(source.index, 1);\n\n        if (destination.droppableId === source.droppableId) {\n          listToMutate.cards.splice(destination.index, 0, cardToMutate);\n        } else {\n          destList = prev[selectedBoard].find(\n            ({ id }) => id === Number(destination.droppableId)\n          );\n\n          destList.cards.splice(destination.index, 0, cardToMutate);\n        }\n        return {\n          ...prev,\n          [selectedBoard]: prev[selectedBoard].map((each) =>\n            each.id === listToMutate.id\n              ? listToMutate\n              : destList && destList?.id === each.id\n              ? destList\n              : each\n          ),\n        };\n      });\n    },\n    [selectedBoard]\n  );\n\n  useEffect(() => {\n    getMockData();\n  }, []);\n\n  if (Object.keys(dashboard).length === 0 && !selectedBoard) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"App\">\n      <NavBar\n        titleInfo={titleInfo}\n        dashboardList={Object.keys(dashboard)}\n        onDashboardChange={onDashboardChange}\n        selectedBoard={selectedBoard}\n        onEnter={onDashBoardTitleSave}\n      />\n      <div className=\"list-section\">\n        {Object.keys(dashboard).length > 1 && (\n          <div className=\"dashboard-delete\">\n            <h2>delete dashboard</h2>\n            <button className=\"btn-c red\" onClick={deleteBoard}>\n              &#x2716;\n            </button>\n          </div>\n        )}\n        <Scrollbars\n          className=\"scroll\"\n          renderThumbHorizontal={({ style, ...props }) => (\n            <div\n              {...props}\n              style={{\n                ...style,\n                backgroundColor: \"rgb(48, 129, 176)\",\n                borderRadius: \"3px\",\n              }}\n            />\n          )}\n        >\n          <div className=\"list-container\">\n            <DragDropContext onDragEnd={onDragEnd}>\n              {dashboard[selectedBoard]?.map((eachList, i) => (\n                <List\n                  key={i}\n                  list={eachList}\n                  updateDashBoard={updateDashBoard}\n                  onDelete={deleteList}\n                />\n              ))}\n            </DragDropContext>\n            <AddCard addingFor=\"add a new list...\" onSave={addList} />\n          </div>\n        </Scrollbars>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}