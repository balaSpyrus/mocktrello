{"version":3,"sources":["components/card/addCard.js","components/card/card.js","components/modals/editCardModal.js","components/card/cardList.js","components/navbar/navBar.js","App.js","serviceWorker.js","index.js"],"names":["AddOne","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleBtn","setState","prev","isAddingOne","onToggle","state","onTitleChange","e","title","target","value","onSave","onEnterPress","key","nextProps","react_default","a","createElement","className","type","placeholder","addingFor","autoFocus","onChange","onKeyPress","onClick","href","React","Component","cardTarget","hover","monitor","component","onHoverList","listID","dragIndex","getItem","index","hoverIndex","hoverBoundingRect","findDOMNode","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","moveCard","Card","getTitleColor","priority","classNames","push","join","_this2","_this$props","card","isDragging","connectDragSource","connectDropTarget","expandCard","deleteCard","id","description","comments","length","concat","onMouseDown","preventDefault","defaultProps","flow","DragSource","beginDrag","endDrag","didDrop","handleDrop","connect","dragSource","connectDragPreview","dragPreview","DropTarget","dropTarget","hovered","isOver","item","EditCardModal","deleteComment","objectSpread","splice","onInputChange","comment","addComment","onEditClose","name","defineProperty","onClose","JSON","parse","stringify","titleIsOpen","descriptionIsOpen","react_modal_lib_default","isOpen","onRequestClose","overlayClassName","appElement","document","getElementById","lib","autoHeight","autoHeightMin","autoHeightMax","renderThumbVertical","_ref2","style","objectWithoutProperties","assign","backgroundColor","borderRadius","map","i","List","addCard","list","cards","Date","getTime","updateDashBoard","expandedCard","closeModal","arguments","undefined","eachCard","dragCard","filter","isAddingCard","onDelete","_ref","components_card_card","modals_editCardModal","NavBar","getTitleAndVersion","version","titleInfo","onClickAdd","showAddInput","onEnter","dashboardList","onDashboardChange","selectedBoard","dashboard","App","getMockData","asyncToGenerator","regenerator_default","mark","_callee","data","wrap","_context","next","fetch","process","then","json","sent","_prev","keys","stop","addList","deleteList","eachList","cardID","currentHoverListID","lists","listToRemove","listToAdd","removedCard","indexOf","onDashBoardTitleSave","deleteBoard","Fragment","navBar","react_dnd_lib","backend","HTML5Backend","renderThumbHorizontal","card_cardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2aAsEeA,cAnEX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAgBVQ,UAAY,WACRP,EAAKQ,SAAS,SAAAC,GAAI,MAAK,CACnBC,aAAcD,EAAKC,eAEvBV,EAAKD,MAAMY,UAAYX,EAAKD,MAAMY,UAAUX,EAAKY,MAAMF,cArBxCV,EAyBnBa,cAAgB,SAACC,GACbd,EAAKQ,SAAS,CACVO,MAAOD,EAAEE,OAAOC,SA3BLjB,EA+BnBkB,OAAS,WAELlB,EAAKD,MAAMmB,OAAOlB,EAAKY,MAAMG,OAC7Bf,EAAKD,MAAMY,UAAYX,EAAKD,MAAMY,UAAS,GAC3CX,EAAKQ,SAAS,CACVO,MAAO,GACPL,aAAa,KArCFV,EA0CnBmB,aAAe,SAACL,GACE,UAAVA,EAAEM,KAAmBpB,EAAKY,MAAMG,OAChCf,EAAKkB,UA1CTlB,EAAKY,MAAQ,CACTF,aAAa,EACbK,MAAO,IAJIf,yFAQOqB,GAClBlB,KAAKJ,MAAMW,cAAgBW,EAAUX,aACrCP,KAAKK,SAAS,CACVE,YAAaW,EAAUX,+CAuC/B,OAEIP,KAAKS,MAAMF,YACPY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAaxB,KAAKJ,MAAM6B,UAAWC,WAAS,EAACZ,MAAOd,KAAKS,MAAMG,MAAOe,SAAU3B,KAAKU,cAAekB,WAAY5B,KAAKgB,eACxIG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaO,QAAS7B,KAAKS,MAAMG,MAAQZ,KAAKe,OAAS,MAAzE,UACAI,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYO,QAAS7B,KAAKI,WAA5C,YAIRe,EAAAC,EAAAC,cAAA,KAAGS,KAAK,KAAKR,UAAU,kBAAkBO,QAAS7B,KAAKI,WAAYJ,KAAKJ,MAAM6B,kBA9DzEM,IAAMC,6BCqBrBC,UAAa,CACfC,MADe,SACTtC,EAAOuC,EAASC,GAClBxC,EAAMyC,YAAYzC,EAAM0C,QACxB,IAAMC,EAAYJ,EAAQK,UAAUC,MAC9BC,EAAa9C,EAAM6C,MAEzB,GAAIF,IAAcG,EAAlB,CAIA,IAAMC,EAAqBC,sBACvBR,GACDS,wBAEGC,GAAgBH,EAAkBI,OAASJ,EAAkBK,KAAO,EAEpEC,EADed,EAAQe,kBACOC,EAAIR,EAAkBK,IAEtDT,EAAYG,GAAcO,EAAeH,GAGzCP,EAAYG,GAAcO,EAAeH,IAI7ClD,EAAMwD,SAASb,EAAWG,EAAY9C,EAAM0C,QAC5CH,EAAQK,UAAUC,MAAQC,OAM5BW,6MAMFC,cAAgB,SAACC,GACb,IAAIC,EAAa,CAAC,cAElB,OAAQD,EAAW,IACf,IAAK,IAAKC,EAAWC,KAAK,eACtB,MACJ,IAAK,IAAKD,EAAWC,KAAK,eACtB,MACJ,IAAK,IAAKD,EAAWC,KAAK,QACtB,MACJ,IAAK,IAAKD,EAAWC,KAAK,YACtB,MACJ,IAAK,IAAKD,EAAWC,KAAK,QACtB,MACJ,QAASD,EAAWC,KAAK,OAI7B,OAAOD,EAAWE,KAAK,8EAElB,IAAAC,EAAA3D,KAAA4D,EAQD5D,KAAKJ,MALLiE,EAHCD,EAGDC,KACAC,EAJCF,EAIDE,WAEAC,EANCH,EAMDG,kBACAC,EAPCJ,EAODI,kBAGJ,OACID,GACAC,GACAD,EACIC,EACIH,EAAO1C,EAAAC,EAAAC,cAAA,OAAKC,UAAWwC,EAAa,iBAAmB,OAAQjC,QAAS7B,KAAKJ,MAAMqE,YAC/E9C,EAAAC,EAAAC,cAAA,OAAKC,UAAWtB,KAAKsD,cAAcO,EAAKN,WACpCpC,EAAAC,EAAAC,cAAA,gBAASwC,EAAKjD,MAAd,MACAO,EAAAC,EAAAC,cAAA,QAAMQ,QAAS,kBAAM8B,EAAK/D,MAAMsE,WAAWL,EAAKM,MAAhD,WAEJhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBV,MAAOiD,EAAKO,aAExCP,EAAKQ,SAASC,OACVnD,EAAAC,EAAAC,cAAA,YAAAkD,OAAOV,EAAKQ,SAASC,OAArB,gBAAgDnD,EAAAC,EAAAC,cAAA,sCAGvDF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUkD,YAAa,SAAA7D,GAAC,OAAIA,EAAE8D,mBAAkBtD,EAAAC,EAAAC,cAAA,2CApDzEU,IAAMC,WAAnBqB,EAEKqB,aAAe,CAClBb,KAAM,MAuDCc,UACXC,YACI,OA5GW,CACfC,UADe,SACLjF,GACN,MAAO,CACHuE,GAAIvE,EAAMuE,GACV7B,OAAQ1C,EAAM0C,OACdG,MAAO7C,EAAM6C,QAGrBqC,QARe,SAQPlF,EAAOuC,GACX,GAAKA,EAAQ4C,WAAcnF,EAAMiE,KAGjC,OAAOjE,EAAMoF,WAAWpF,EAAMiE,KAAKM,GAAIvE,EAAM0C,UAkG7C,SAAC2C,EAAS9C,GAAV,MAAuB,CACnB4B,kBAAmBkB,EAAQC,aAC3BC,mBAAoBF,EAAQG,cAC5BtB,WAAY3B,EAAQ2B,gBAG5BuB,YAAW,OAAQpD,EAAY,SAACgD,EAAS9C,GAAV,MAAuB,CAClD6B,kBAAmBiB,EAAQK,aAC3BC,QAASpD,EAAQqD,SACjBC,KAAMtD,EAAQK,aAbPmC,CAebtB,sCCeaqC,sBAxIX,SAAAA,EAAY9F,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0F,IACf7F,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4F,GAAAvF,KAAAH,KAAMJ,KASV+F,cAAgB,SAAClD,GAAU,IACjBoB,EADiB/D,OAAA8F,EAAA,EAAA9F,CAAA,GACHD,EAAKY,OAAnBoD,KACNA,EAAKQ,SAASwB,OAAOpD,EAAO,GAC5B5C,EAAKQ,SAAS,CAAEwD,UAbDhE,EAgBnBiG,cAAgB,SAACnF,GACbd,EAAKQ,SAAS,CACV0F,QAASpF,EAAEE,OAAOC,SAlBPjB,EAsBnBmG,WAAa,SAACrF,GAEV,GAAc,UAAVA,EAAEM,KAAmBpB,EAAKY,MAAMsF,QAAS,KACnClC,EADmC/D,OAAA8F,EAAA,EAAA9F,CAAA,GACrBD,EAAKY,OAAnBoD,KACNA,EAAKQ,SAASZ,KAAK5D,EAAKY,MAAMsF,SAC9BlG,EAAKQ,SAAS,CACVwD,OACAkC,QAAS,OA7BFlG,EAkCnBoG,YAAc,SAACC,GACXrG,EAAKQ,SAAS,SAAAC,GAAI,OAAAR,OAAAqG,EAAA,EAAArG,CAAA,GACboG,EAAO,UAAY5F,EAAK4F,EAAO,cApCrBrG,EAyCnBkB,OAAS,WACLlB,EAAKD,MAAMwG,SAAWvG,EAAKD,MAAMwG,QAAQvG,EAAKY,MAAMoD,OA1CrChE,EA6CnB8B,SAAW,SAAChB,GACR,IAAIuF,EAAOvF,EAAEE,OAAOqF,KAChBpF,EAAQH,EAAEE,OAAOC,MAErBjB,EAAKQ,SAAS,SAAAC,GACV,IAAIuD,EAAI/D,OAAA8F,EAAA,EAAA9F,CAAA,GAAQQ,EAAKuD,MAErB,OADAA,EAAKqC,GAAQpF,EACN,CAAE+C,WAlDbhE,EAAKY,MAAQ,CACToD,KAAMwC,KAAKC,MAAMD,KAAKE,UAAU3G,EAAMiE,OACtCkC,QAAS,GACTS,aAAa,EACbC,mBAAmB,GANR5G,wEAwDV,IAAA8D,EAAA3D,KACG6D,EADH/D,OAAA8F,EAAA,EAAA9F,CAAA,GACiBE,KAAKS,OAAnBoD,KAER,OAEI1C,EAAAC,EAAAC,cAACqF,EAAAtF,EAAD,CACIuF,QAAQ,EACRC,eAAgB5G,KAAKJ,MAAMwG,QAC3B9E,UAAU,QACVuF,iBAAiB,UACjBC,WAAYC,SAASC,eAAe,SAEpC7F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAEPtB,KAAKS,MAAM+F,YACPrF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOD,UAAU,sBAAsB4E,KAAK,QACpDvE,SAAU3B,KAAK2B,SAAUb,MAAO+C,EAAKjD,QAEzCO,EAAAC,EAAAC,cAAA,UAAKwC,EAAKjD,OAElBO,EAAAC,EAAAC,cAAA,QAAMC,UAAWtB,KAAKS,MAAM+F,YAAc,QAAU,OAAQ3E,QAAS,kBAAM8B,EAAKsC,YAAY,aAEhG9E,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eAAjB,eACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEPtB,KAAKS,MAAMgG,kBACPtF,EAAAC,EAAAC,cAAA,YAAUP,MAAO+C,EAAKO,YAAazC,SAAU3B,KAAK2B,SAC9CuE,KAAK,cAAc5E,UAAU,mBAEjCH,EAAAC,EAAAC,cAAA,SAAIwC,EAAKO,aAEjBjD,EAAAC,EAAAC,cAAA,QAAMC,UAAWtB,KAAKS,MAAMgG,kBAAoB,QAAU,OAAQ5E,QAAS,kBAAM8B,EAAKsC,YAAY,oBAG1G9E,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eAAjB,UACAH,EAAAC,EAAAC,cAAA,UAAQP,MAAO+C,EAAKN,SAAU2C,KAAK,WAAWvE,SAAU3B,KAAK2B,SAAUL,UAAU,2BAE7EH,EAAAC,EAAAC,cAAA,UAAQP,MAAO,GAAf,OACAK,EAAAC,EAAAC,cAAA,UAAQP,MAAO,GAAf,eACAK,EAAAC,EAAAC,cAAA,UAAQP,MAAO,GAAf,eACAK,EAAAC,EAAAC,cAAA,UAAQP,MAAO,GAAf,QACAK,EAAAC,EAAAC,cAAA,UAAQP,MAAO,GAAf,YACAK,EAAAC,EAAAC,cAAA,UAAQP,MAAO,GAAf,UAGRK,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eAAjB,YACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAC4F,EAAA,WAAD,CACI3F,UAAU,SACV4F,YAAU,EACVC,cAAe,EACfC,cAAe,IACfC,oBACI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAU3H,EAAbE,OAAA0H,EAAA,EAAA1H,CAAAwH,EAAA,kBACInG,EAAAC,EAAAC,cAAA,MAAAvB,OAAA2H,OAAA,GAAS7H,EAAT,CAAgB2H,MAAKzH,OAAA8F,EAAA,EAAA9F,CAAA,GAAOyH,EAAP,CAAcG,gBAAiB,wBAAyBC,aAAc,aAG/F9D,EAAKQ,SAASuD,IAAI,SAAC7B,EAAS8B,GAAV,OAAgB1G,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAUL,IAAK4G,GAC7D1G,EAAAC,EAAAC,cAAA,SAAI0E,GACJ5E,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAiBO,QAAS,kBAAM8B,EAAKgC,cAAckC,KAAnE,cAIZ1G,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOT,MAAOd,KAAKS,MAAMsF,QAASzE,UAAU,cACpDE,YAAY,sCACZG,SAAU3B,KAAK8F,cAAelE,WAAY5B,KAAKgG,eAG3D7E,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaO,QAAS7B,KAAKe,QAA7C,UACAI,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYO,QAAS7B,KAAKJ,MAAMwG,SAAlD,mBAlIQrE,IAAMC,YCE5B8F,cACF,SAAAA,EAAYlI,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8H,IACfjI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgI,GAAA3H,KAAAH,KAAMJ,KAoBVmI,QAAU,SAACnH,GACP,IAAIoH,EAAIlI,OAAA8F,EAAA,EAAA9F,CAAA,GAAQD,EAAKY,MAAMuH,MAE3BA,EAAKC,MAAMxE,KAAK,CACZU,IAAI,IAAI+D,MAAOC,UACfvH,QACA2C,SAAU,EACVa,YAAa,GACbC,SAAU,KAGdxE,EAAKD,MAAMwI,gBAAgBJ,IAhCZnI,EAoCnBoE,WAAa,SAACJ,GACVhE,EAAKQ,SAAS,CAAEgI,aAAcxE,KArCfhE,EAwCnByI,WAAa,WAAiB,IAAhBzE,EAAgB0E,UAAAjE,OAAA,QAAAkE,IAAAD,UAAA,GAAAA,UAAA,GAAT,KAEbP,EAAIlI,OAAA8F,EAAA,EAAA9F,CAAA,GAAQD,EAAKY,MAAMuH,MAEvBnE,IACAmE,EAAKC,MAAQD,EAAKC,MAAML,IAAI,SAAAa,GACxB,OAAIA,EAAStE,KAAON,EAAKM,GACdN,EACJ4E,KAIf5I,EAAKQ,SAAS,CACVgI,aAAc,OAGlBxI,EAAKD,MAAMwI,gBAAgBJ,IAxDZnI,EA2DnBuD,SAAW,SAACb,EAAWG,GAEnB,IAAIsF,EAAIlI,OAAA8F,EAAA,EAAA9F,CAAA,GAAQD,EAAKY,MAAMuH,MACrBU,EAAWV,EAAKC,MAAM1F,GAC5ByF,EAAKC,MAAMpC,OAAOtD,EAAW,GAC7ByF,EAAKC,MAAMpC,OAAOnD,EAAY,EAAGgG,GAEjC7I,EAAKD,MAAMwI,gBAAgBJ,IAlEZnI,EAsEnBqE,WAAa,SAACC,GACV,IAAI6D,EAAIlI,OAAA8F,EAAA,EAAA9F,CAAA,GAAQD,EAAKY,MAAMuH,MAC3BA,EAAKC,MAAQD,EAAKC,MAAMU,OAAO,SAAAF,GAAQ,OAAIA,EAAStE,KAAOA,IAC3DtE,EAAKD,MAAMwI,gBAAgBJ,IAzEZnI,EA4EnBW,SAAW,kBAAMX,EAAKQ,SAAS,SAAAC,GAAI,MAAK,CAAEsI,cAAetI,EAAKsI,iBA1E1D/I,EAAKY,MAAQ,CACTuH,KAAMpI,EAAMoI,KACZY,cAAc,EACdP,aAAc,MALHxI,yFAaOqB,GAClBA,EAAU8G,MAAQ9G,EAAU8G,OAAShI,KAAKJ,MAAMoI,MAChDhI,KAAKK,SAAS,CACV2H,KAAM9G,EAAU8G,wCA8DnB,IAAArE,EAAA3D,KACL,OACImB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,YAAQrB,KAAKS,MAAMuH,KAAKpH,OACxBO,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYO,QAAS,kBAAM8B,EAAK/D,MAAMiJ,SAASlF,EAAKlD,MAAMuH,KAAK7D,MAA/E,WAEJhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAC4F,EAAA,WAAD,CACI3F,UAAU,SACV4F,YAAU,EACVC,cAAe,EACfC,cAAepH,KAAKS,MAAMmI,aAAe,sBAAwB,sBACjEvB,oBACI,SAAAyB,GAAA,IAAGvB,EAAHuB,EAAGvB,MAAU3H,EAAbE,OAAA0H,EAAA,EAAA1H,CAAAgJ,EAAA,kBACI3H,EAAAC,EAAAC,cAAA,MAAAvB,OAAA2H,OAAA,GAAS7H,EAAT,CAAgB2H,MAAKzH,OAAA8F,EAAA,EAAA9F,CAAA,GAAOyH,EAAP,CAAcG,gBAAiB,wBAAyBC,aAAc,aAG/F3H,KAAKS,MAAMuH,KAAKC,MAAM3D,OAAStE,KAAKS,MAAMuH,KAAKC,MAAML,IAAI,SAACa,EAAUZ,GAAX,OAAiB1G,EAAAC,EAAAC,cAAC0H,EAAD,CACtEtG,MAAOoF,EAAGvF,OAAQqB,EAAKlD,MAAMuH,KAAK7D,GAClCD,WAAYP,EAAKO,WACjBD,WAAY,kBAAMN,EAAKM,WAAWwE,IAClCpG,YAAasB,EAAK/D,MAAMyC,YACxBe,SAAUO,EAAKP,SACf4B,WAAYrB,EAAK/D,MAAMoF,WACvBnB,KAAM4E,EACNxH,IAAK4G,MAEL1G,EAAAC,EAAAC,cAAC0H,EAAD,CACI3F,SAAUpD,KAAKoD,SACff,YAAarC,KAAKJ,MAAMyC,YACxB2C,WAAYhF,KAAKJ,MAAMoF,eAK3C7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAC0G,EAAD,CACItG,UAAU,gBACVV,OAAQf,KAAK+H,QACbvH,SAAUR,KAAKQ,YAInBR,KAAKS,MAAM4H,cACXlH,EAAAC,EAAAC,cAAC2H,EAAD,CACInF,KAAM7D,KAAKS,MAAM4H,aACjBjC,QAASpG,KAAKsI,qBA9HnBvG,IAAMC,WAAnB8F,EAUKpD,aAAe,CAClBsD,KAAM,MA4HCF,QC9DAmB,sBA3EX,SAAAA,EAAYrJ,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiJ,IACfpJ,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmJ,GAAA9I,KAAAH,KAAMJ,KAQVsJ,mBAAqB,WACjB,IAAItI,EAAQ,SAAUuI,EAAU,MAKhC,OAJItJ,EAAKD,MAAMwJ,YACXxI,EAAQf,EAAKD,MAAMwJ,UAAUxI,MAC7BuI,EAAUtJ,EAAKD,MAAMwJ,UAAUD,SAE3BhI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACnBH,EAAAC,EAAAC,cAAA,YAAOT,GACNuI,GAAWhI,EAAAC,EAAAC,cAAA,YAAO8H,KAjBRtJ,EAqBnBwJ,WAAa,WACTxJ,EAAKQ,SAAS,SAAAC,GAAI,MAAK,CAAEgJ,cAAehJ,EAAKgJ,aAAc1I,MAAO,OAtBnDf,EAyBnBa,cAAgB,SAACC,GACbd,EAAKQ,SAAS,CACVO,MAAOD,EAAEE,OAAOC,SA3BLjB,EAiCnBmB,aAAe,SAACL,GACE,UAAVA,EAAEM,KAAmBpB,EAAKY,MAAMG,QAChCf,EAAKD,MAAM2J,SAAW1J,EAAKD,MAAM2J,QAAQ1J,EAAKY,MAAMG,OACpDf,EAAKwJ,eAlCTxJ,EAAKY,MAAQ,CACT6I,cAAc,EACd1I,MAAO,IAJIf,wEA0Cf,OACIsB,EAAAC,EAAAC,cAAA,OAAK8C,GAAG,UACHnE,KAAKkJ,qBACN/H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEPtB,KAAKS,MAAM6I,aACPnI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,kCAAkCV,MAAOd,KAAKS,MAAMG,MAAOe,SAAU3B,KAAKU,cAAekB,WAAY5B,KAAKgB,eACzIG,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYO,QAAS7B,KAAKqJ,YAA5C,WAGJlI,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYO,QAAS7B,KAAKqJ,YACxClI,EAAAC,EAAAC,cAAA,+BAIRrB,KAAKJ,MAAM4J,cAAclF,OAASnD,EAAAC,EAAAC,cAAA,UAAQM,SAAU3B,KAAKJ,MAAM6J,kBAAmBnI,UAAU,6BAA6BR,MAAOd,KAAKJ,MAAM8J,eAGnI1J,KAAKJ,MAAM4J,cACN5B,IAAI,SAAC+B,EAAW9B,GAAZ,OAAkB1G,EAAAC,EAAAC,cAAA,UACnBJ,IAAK4G,EACL/G,MAAO6I,GACNA,EAAY,iBAEjB,cApEf3H,cC0LN4H,cAtLb,SAAAA,EAAYhK,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4J,IACjB/J,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8J,GAAAzJ,KAAAH,KAAMJ,KAiBRiK,YAlBmB/J,OAAAgK,EAAA,EAAAhK,CAAAiK,EAAA3I,EAAA4I,KAkBL,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAA3I,EAAA+I,KAAA,SAAAC,GAAA,cAAAA,EAAA9J,KAAA8J,EAAAC,MAAA,cAAAD,EAAAC,KAAA,EACOC,MAAMC,8BAAiGC,KAAK,SAAAN,GAAI,OAAIA,EAAKO,SADhI,OACNP,EADME,EAAAM,KAEZ7K,EAAKQ,SAAS,SAACsK,GAAD,MAAY,CACxBhB,UAAWO,EACXR,cAAe5J,OAAO8K,KAAKV,GAAM,MAJvB,wBAAAE,EAAAS,SAAAZ,MAlBKpK,EA2BnBiL,QAAU,SAAClK,GAGTf,EAAKQ,SAAS,SAACC,GAEb,IAAIqJ,EAAS7J,OAAA8F,EAAA,EAAA9F,CAAA,GAAQQ,EAAKqJ,WACtBD,EAAgBpJ,EAAKoJ,cAAgBpJ,EAAKoJ,cAAgB,UAa9D,OAXKC,EAAUD,KAEbC,EADAD,EAAgB,WACW,IAG7BC,EAAUD,GAAejG,KAAK,CAC5BU,IAAI,IAAI+D,MAAOC,UACfvH,QACAqH,MAAO,KAGF,CAAE0B,YAAWD,oBA9CL7J,EAkDnBkL,WAAa,SAAC5G,GACZtE,EAAKQ,SAAS,SAAAC,GAEZ,IAAIqJ,EAAS7J,OAAA8F,EAAA,EAAA9F,CAAA,GAAQQ,EAAKqJ,WAK1B,OAHAA,EAAUrJ,EAAKoJ,eAAiBC,EAAUrJ,EAAKoJ,eAC5Cf,OAAO,SAAAqC,GAAQ,OAAIA,EAAS7G,KAAOA,IAE/B,CAAEwF,gBA1DM9J,EA8DnBmF,WAAa,SAACiG,EAAQ3I,GAEpB,GAAIzC,EAAKY,MAAMyK,oBAAsBrL,EAAKY,MAAMyK,qBAAuB5I,EAAQ,CAE7E,IAAIqH,EAAYtD,KAAKC,MAAMD,KAAKE,UAAU1G,EAAKY,MAAMkJ,YACjDwB,EAAQxB,EAAU9J,EAAKY,MAAMiJ,eAE7B0B,EAAeD,EAAMxC,OAAO,SAAAX,GAAI,OAAIA,EAAK7D,KAAO7B,IAAQ,GACxD+I,EAAYF,EAAMxC,OAAO,SAAAX,GAAI,OAAIA,EAAK7D,KAAOtE,EAAKY,MAAMyK,qBAAoB,GAC5EI,EAAcF,EAAanD,MAAMpC,OAAOuF,EAAanD,MAAMU,OAAO,SAAA9E,GAAI,OAAIA,IAAM+D,IAAI,SAAA/D,GAAI,OAAIA,EAAKM,KAAIoH,QAAQN,GAAS,GAAG,GAC7HI,EAAUpD,MAAMxE,KAAK6H,GACrBD,EAAUpD,MAAQoD,EAAUpD,MAAMU,OAAO,SAAA9E,GAAI,OAAIA,IACjDuH,EAAanD,MAAQmD,EAAanD,MAAMU,OAAO,SAAA9E,GAAI,OAAIA,IACvD8F,EAAU9J,EAAKY,MAAMiJ,eAAiByB,EACtCtL,EAAKQ,SAAS,CAAEsJ,gBA5ED9J,EAkFnBwC,YAAc,SAAC8B,GACTA,GAAMA,IAAOtE,EAAKY,MAAMyK,oBAC1BrL,EAAKQ,SAAS,CACZ6K,mBAAoB/G,KArFPtE,EA0FnB4J,kBAAoB,SAAC9I,GACnBd,EAAKQ,SAAS,CACZqJ,cAAe/I,EAAEE,OAAOC,SA5FTjB,EAgGnBuI,gBAAkB,SAACJ,GAEjB,IAAI2B,EAAYtD,KAAKC,MAAMD,KAAKE,UAAU1G,EAAKY,MAAMkJ,YACjDwB,EAAQxB,EAAU9J,EAAKY,MAAMiJ,eAAe9B,IAAI,SAAAoD,GAClD,OAAIA,EAAS7G,KAAO6D,EAAK7D,GAChB6D,EACFgD,IAETrB,EAAU9J,EAAKY,MAAMiJ,eAAiByB,EAEtCtL,EAAKQ,SAAS,CAAEsJ,eA1GC9J,EA8GnB2L,qBAAuB,SAAC5K,GACtB,IAAI+I,EAAS7J,OAAA8F,EAAA,EAAA9F,CAAA,GAAQD,EAAKY,MAAMkJ,WAChCA,EAAU/I,GAAS,GACnBf,EAAKQ,SAAS,CACZsJ,YACAD,cAAe9I,KAnHAf,EAuHnB4L,YAAc,WACZ,IAAI9B,EAAS7J,OAAA8F,EAAA,EAAA9F,CAAA,GAAQD,EAAKY,MAAMkJ,kBACzBA,EAAU9J,EAAKY,MAAMiJ,eAC5B7J,EAAKQ,SAAS,CACZsJ,YACAD,cAAe5J,OAAO8K,KAAKjB,GAAW,MA1HxC9J,EAAKY,MAAQ,CACX2I,UAAW,CACTxI,MAAO,SACPuI,QAAS,OAEXO,cAAe,GACfC,UAAW,GACXuB,mBAAoB,MATLrL,mFAejBG,KAAK6J,+CAiHE,IAAAlG,EAAA3D,KAEP,OAAiD,IAA7CF,OAAO8K,KAAK5K,KAAKS,MAAMkJ,WAAWrF,OAC7BnD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsK,SAAA,MAIPvK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAEsK,EAAF,CACEvC,UAAWpJ,KAAKS,MAAM2I,UACtBI,cAAe1J,OAAO8K,KAAK5K,KAAKS,MAAMkJ,WACtCF,kBAAmBzJ,KAAKyJ,kBACxBC,cAAe1J,KAAKS,MAAMiJ,cAC1BH,QAASvJ,KAAKwL,uBAGhBrK,EAAAC,EAAAC,cAACuK,EAAA,EAAD,CAAaC,QAASC,KACpB3K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZxB,OAAO8K,KAAK5K,KAAKS,MAAMkJ,WAAWrF,OAAS,GAC1CnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYO,QAAS7B,KAAKyL,aAA5C,WAGJtK,EAAAC,EAAAC,cAAC4F,EAAA,WAAD,CACE3F,UAAU,SACVyK,sBACE,SAAAzE,GAAA,IAAGC,EAAHD,EAAGC,MAAU3H,EAAbE,OAAA0H,EAAA,EAAA1H,CAAAwH,EAAA,kBACEnG,EAAAC,EAAAC,cAAA,MAAAvB,OAAA2H,OAAA,GAAS7H,EAAT,CAAgB2H,MAAKzH,OAAA8F,EAAA,EAAA9F,CAAA,GAAOyH,EAAP,CAAcG,gBAAiB,oBAAqBC,aAAc,aAG3FxG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEXtB,KAAKS,MAAMkJ,UAAU3J,KAAKS,MAAMiJ,gBAAkB1J,KAAKS,MAAMkJ,UAAU3J,KAAKS,MAAMiJ,eAAe9B,IAAI,SAACoD,EAAUnD,GAAX,OAAiB1G,EAAAC,EAAAC,cAAC2K,EAAD,CACpH/K,IAAK4G,EACLG,KAAMgD,EACN3I,YAAasB,EAAKtB,YAClB2C,WAAYrB,EAAKqB,WACjBoD,gBAAiBzE,EAAKyE,gBACtBS,SAAUlF,EAAKoH,eAEnB5J,EAAAC,EAAAC,cAAC0G,EAAD,CACEtG,UAAU,oBACVV,OAAQf,KAAK8K,sBA5Kb/I,IAAMC,yBCIJiK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOpL,EAAAC,EAAAC,cAACmL,EAAD,MAASzF,SAASC,eAAe,SDyH3C,kBAAmByF,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.f29700a8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass AddOne extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isAddingOne: false,\r\n            title: ''\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (this.props.isAddingOne !== nextProps.isAddingOne) {\r\n            this.setState({\r\n                isAddingOne: nextProps.isAddingOne\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    toggleBtn = () => {\r\n        this.setState(prev => ({\r\n            isAddingOne: !prev.isAddingOne\r\n        }))\r\n        this.props.onToggle && this.props.onToggle(!this.state.isAddingOne)\r\n\r\n    }\r\n\r\n    onTitleChange = (e) => {\r\n        this.setState({\r\n            title: e.target.value\r\n        })\r\n    }\r\n\r\n    onSave = () => {\r\n\r\n        this.props.onSave(this.state.title)\r\n        this.props.onToggle && this.props.onToggle(false)\r\n        this.setState({\r\n            title: '',\r\n            isAddingOne: false\r\n        })\r\n\r\n    }\r\n\r\n    onEnterPress = (e) => {\r\n        if (e.key === 'Enter' && this.state.title) {\r\n            this.onSave()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            this.state.isAddingOne ?\r\n                <div className='add-one-mini'>\r\n                    <input type='text' placeholder={this.props.addingFor} autoFocus value={this.state.title} onChange={this.onTitleChange} onKeyPress={this.onEnterPress} />\r\n                    <div>\r\n                        <button className='btn-c blue' onClick={this.state.title ? this.onSave : null}>&#x2714;</button>\r\n                        <button className='btn-c red' onClick={this.toggleBtn}>&#x2716;</button>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <a href='/#' className='add-one-element' onClick={this.toggleBtn}>{this.props.addingFor}</a>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddOne;\r\n","import flow from 'lodash/flow';\r\nimport React from 'react';\r\nimport { DragSource, DropTarget } from 'react-dnd';\r\nimport { findDOMNode } from 'react-dom';\r\nimport './card.css';\r\n\r\n\r\nconst cardSource = {\r\n    beginDrag(props) {\r\n        return {\r\n            id: props.id,\r\n            listID: props.listID,\r\n            index: props.index\r\n        }\r\n    },\r\n    endDrag(props, monitor) {\r\n        if (!monitor.didDrop() || !props.card) {\r\n            return;\r\n        }\r\n        return props.handleDrop(props.card.id, props.listID);\r\n    }\r\n};\r\n\r\nconst cardTarget = {\r\n    hover(props, monitor, component) {\r\n        props.onHoverList(props.listID)\r\n        const dragIndex = monitor.getItem().index\r\n        const hoverIndex = props.index\r\n\r\n        if (dragIndex === hoverIndex) {\r\n            return;\r\n        }\r\n\r\n        const hoverBoundingRect = (findDOMNode(\r\n            component\r\n        )).getBoundingClientRect();\r\n\r\n        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n        const clientOffset = monitor.getClientOffset();\r\n        const hoverClientY = (clientOffset).y - hoverBoundingRect.top;\r\n\r\n        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n            return;\r\n        }\r\n        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        props.moveCard(dragIndex, hoverIndex, props.listID);\r\n        monitor.getItem().index = hoverIndex;\r\n    }\r\n}\r\n\r\n\r\n\r\nclass Card extends React.Component {\r\n\r\n    static defaultProps = {\r\n        card: null\r\n    }\r\n\r\n    getTitleColor = (priority) => {\r\n        let classNames = ['card-title']\r\n\r\n        switch (priority + '') {\r\n            case '1': classNames.push('investigate')\r\n                break;\r\n            case '2': classNames.push('in-progress')\r\n                break;\r\n            case '3': classNames.push('done')\r\n                break;\r\n            case '4': classNames.push('critical')\r\n                break;\r\n            case '5': classNames.push('hold')\r\n                break;\r\n            default: classNames.push('new')\r\n                break;\r\n        }\r\n\r\n        return classNames.join(' ')\r\n    }\r\n    render() {\r\n\r\n        const {\r\n            card,\r\n            isDragging,\r\n            // hovered,\r\n            connectDragSource,\r\n            connectDropTarget\r\n        } = this.props;\r\n\r\n        return (\r\n            connectDragSource &&\r\n            connectDropTarget &&\r\n            connectDragSource(\r\n                connectDropTarget(\r\n                    card ? <div className={isDragging ? 'card card-drag' : 'card'} onClick={this.props.expandCard}>\r\n                        <div className={this.getTitleColor(card.priority)}>\r\n                            <span > {card.title}  </span>\r\n                            <span onClick={() => this.props.deleteCard(card.id)}>&#x2716;</span>\r\n                        </div>\r\n                        <div className='card-comment-count' title={card.description}>\r\n                            {\r\n                                card.comments.length ?\r\n                                    <i>{`${card.comments.length} comment(s)`}</i> : <i>Be the first to comment</i>\r\n                            }\r\n                        </div>\r\n                    </div> : <div className='no-card' onMouseDown={e => e.preventDefault()}><i>No Card(s) available</i></div>\r\n                ))\r\n        );\r\n    }\r\n}\r\n\r\nexport default flow(\r\n    DragSource(\r\n        'card',\r\n        cardSource,\r\n        (connect, monitor) => ({\r\n            connectDragSource: connect.dragSource(),\r\n            connectDragPreview: connect.dragPreview(),\r\n            isDragging: monitor.isDragging()\r\n        })\r\n    ),\r\n    DropTarget('card', cardTarget, (connect, monitor) => ({\r\n        connectDropTarget: connect.dropTarget(),\r\n        hovered: monitor.isOver(),\r\n        item: monitor.getItem()\r\n    }))\r\n)(Card);\r\n","import React from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport Modal from 'react-modal';\r\nimport './editCardModal.css';\r\n\r\n\r\nclass EditCardModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            card: JSON.parse(JSON.stringify(props.card)),\r\n            comment: '',\r\n            titleIsOpen: false,\r\n            descriptionIsOpen: false\r\n        }\r\n    }\r\n\r\n    deleteComment = (index) => {\r\n        let { card } = { ...this.state }\r\n        card.comments.splice(index, 1)\r\n        this.setState({ card })\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({\r\n            comment: e.target.value\r\n        })\r\n    }\r\n\r\n    addComment = (e) => {\r\n\r\n        if (e.key === 'Enter' && this.state.comment) {\r\n            let { card } = { ...this.state }\r\n            card.comments.push(this.state.comment)\r\n            this.setState({\r\n                card,\r\n                comment: ''\r\n            })\r\n        }\r\n    }\r\n\r\n    onEditClose = (name) => {\r\n        this.setState(prev => ({\r\n            [name + 'IsOpen']: !prev[name + 'IsOpen']\r\n        }))\r\n\r\n    }\r\n\r\n    onSave = () => {\r\n        this.props.onClose && this.props.onClose(this.state.card)\r\n    }\r\n\r\n    onChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n\r\n        this.setState(prev => {\r\n            let card = { ...prev.card };\r\n            card[name] = value;\r\n            return { card }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { card } = { ...this.state }\r\n\r\n        return (\r\n\r\n            <Modal\r\n                isOpen={true}\r\n                onRequestClose={this.props.onClose}\r\n                className=\"Modal\"\r\n                overlayClassName=\"Overlay\"\r\n                appElement={document.getElementById('root')}\r\n            >\r\n                <div className='edit-modal-title'>\r\n                    {\r\n                        this.state.titleIsOpen ?\r\n                            <input type='text' className='on-edit-modal-title' name='title'\r\n                                onChange={this.onChange} value={card.title} />\r\n                            :\r\n                            <h2>{card.title}</h2>\r\n                    }\r\n                    <span className={this.state.titleIsOpen ? 'close' : 'edit'} onClick={() => this.onEditClose('title')}></span>\r\n                </div>\r\n                <div>\r\n                    <label className='model-label'>description</label>\r\n                    <div className='card-desc'>\r\n                        {\r\n                            this.state.descriptionIsOpen ?\r\n                                <textarea value={card.description} onChange={this.onChange}\r\n                                    name='description' className='edit-text-area' />\r\n                                :\r\n                                <i>{card.description}</i>\r\n                        }\r\n                        <span className={this.state.descriptionIsOpen ? 'close' : 'edit'} onClick={() => this.onEditClose('description')}></span>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <label className='model-label'>status</label>\r\n                    <select value={card.priority} name='priority' onChange={this.onChange} className='select-list status-list'>\r\n\r\n                        <option value={0}>new</option>\r\n                        <option value={1}>investigate</option>\r\n                        <option value={2}>in-progress</option>\r\n                        <option value={3}>done</option>\r\n                        <option value={4}>critical</option>\r\n                        <option value={5}>hold</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label className='model-label'>comments</label>\r\n                    <div className='card-comment-container'>\r\n                        <Scrollbars\r\n                            className=\"scroll\"\r\n                            autoHeight\r\n                            autoHeightMin={0}\r\n                            autoHeightMax={200}\r\n                            renderThumbVertical={\r\n                                ({ style, ...props }) =>\r\n                                    <div {...props} style={{ ...style, backgroundColor: 'rgba(49, 49, 49, 0.4)', borderRadius: '3px' }} />\r\n                            } >\r\n                            {\r\n                                card.comments.map((comment, i) => <span className='comment' key={i}>\r\n                                    <i>{comment}</i>\r\n                                    <span className='comment-delete' onClick={() => this.deleteComment(i)}>&#x2716;</span>\r\n                                </span>)\r\n                            }\r\n                        </Scrollbars>\r\n                        <input type='text' value={this.state.comment} className='add-comment'\r\n                            placeholder='type and press enter to add comment'\r\n                            onChange={this.onInputChange} onKeyPress={this.addComment} />\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <button className='btn-c blue' onClick={this.onSave}>&#x2714;</button>\r\n                    <button className='btn-c red' onClick={this.props.onClose}>&#x2716;</button>\r\n                </div>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditCardModal;\r\n\r\n\r\n","import React from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport Card from './card';\r\nimport AddCard from './addCard';\r\nimport './cardList.css'\r\nimport EditCardModal from '../modals/editCardModal';\r\n\r\n\r\nclass List extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            list: props.list,\r\n            isAddingCard: false,\r\n            expandedCard: null\r\n        }\r\n    }\r\n\r\n    static defaultProps = {\r\n        list: null\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.list && nextProps.list !== this.props.list) {\r\n            this.setState({\r\n                list: nextProps.list\r\n            })\r\n        }\r\n    }\r\n\r\n    addCard = (title) => {\r\n        let list = { ...this.state.list }\r\n\r\n        list.cards.push({\r\n            id: new Date().getTime(),\r\n            title,\r\n            priority: 0,\r\n            description: '',\r\n            comments: []\r\n        })\r\n\r\n        this.props.updateDashBoard(list)\r\n\r\n    }\r\n\r\n    expandCard = (card) => {\r\n        this.setState({ expandedCard: card })\r\n    }\r\n\r\n    closeModal = (card = null) => {\r\n\r\n        let list = { ...this.state.list }\r\n\r\n        if (card) {\r\n            list.cards = list.cards.map(eachCard => {\r\n                if (eachCard.id === card.id)\r\n                    return card\r\n                return eachCard\r\n            })\r\n        }\r\n\r\n        this.setState({\r\n            expandedCard: null\r\n        })\r\n\r\n        this.props.updateDashBoard(list)\r\n    }\r\n\r\n    moveCard = (dragIndex, hoverIndex) => {\r\n\r\n        let list = { ...this.state.list }\r\n        const dragCard = list.cards[dragIndex]\r\n        list.cards.splice(dragIndex, 1);\r\n        list.cards.splice(hoverIndex, 0, dragCard);\r\n\r\n        this.props.updateDashBoard(list)\r\n\r\n    }\r\n\r\n    deleteCard = (id) => {\r\n        let list = { ...this.state.list }\r\n        list.cards = list.cards.filter(eachCard => eachCard.id !== id)\r\n        this.props.updateDashBoard(list)\r\n    }\r\n\r\n    onToggle = () => this.setState(prev => ({ isAddingCard: !prev.isAddingCard }))\r\n\r\n    render() {\r\n        return (\r\n            <div className='list'>\r\n                <div className='title-container'>\r\n                    <span >{this.state.list.title}</span>\r\n                    <span className='btn-c red' onClick={() => this.props.onDelete(this.state.list.id)}>&#x2716;</span>\r\n                </div>\r\n                <div className='card-container'>\r\n                    <Scrollbars\r\n                        className=\"scroll\"\r\n                        autoHeight\r\n                        autoHeightMin={0}\r\n                        autoHeightMax={this.state.isAddingCard ? 'calc(100vh - 220px)' : 'calc(100vh - 165px)'}\r\n                        renderThumbVertical={\r\n                            ({ style, ...props }) =>\r\n                                <div {...props} style={{ ...style, backgroundColor: 'rgba(49, 49, 49, 0.4)', borderRadius: '3px' }} />\r\n                        } >\r\n                        {\r\n                            this.state.list.cards.length ? this.state.list.cards.map((eachCard, i) => <Card\r\n                                index={i} listID={this.state.list.id}\r\n                                deleteCard={this.deleteCard}\r\n                                expandCard={() => this.expandCard(eachCard)}\r\n                                onHoverList={this.props.onHoverList}\r\n                                moveCard={this.moveCard}\r\n                                handleDrop={this.props.handleDrop}\r\n                                card={eachCard}\r\n                                key={i} />)\r\n                                :\r\n                                <Card\r\n                                    moveCard={this.moveCard}\r\n                                    onHoverList={this.props.onHoverList}\r\n                                    handleDrop={this.props.handleDrop}\r\n                                />\r\n                        }\r\n                    </Scrollbars>\r\n                </div>\r\n                <div className='btn-container'>\r\n                    <AddCard\r\n                        addingFor='add a card...'\r\n                        onSave={this.addCard}\r\n                        onToggle={this.onToggle}\r\n                    />\r\n                </div>\r\n                {\r\n                    this.state.expandedCard &&\r\n                    <EditCardModal\r\n                        card={this.state.expandedCard}\r\n                        onClose={this.closeModal}\r\n                    />\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from 'react';\r\nimport './nav.css';\r\n\r\n\r\n\r\nclass NavBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showAddInput: false,\r\n            title: ''\r\n        }\r\n    }\r\n\r\n\r\n    getTitleAndVersion = () => {\r\n        let title = 'Trello', version = '2.0';\r\n        if (this.props.titleInfo) {\r\n            title = this.props.titleInfo.title;\r\n            version = this.props.titleInfo.version;\r\n        }\r\n        return (<div className='nav-title'>\r\n            <span>{title}</span>\r\n            {version && <span>{version}</span>}\r\n        </div>)\r\n    }\r\n\r\n    onClickAdd = () => {\r\n        this.setState(prev => ({ showAddInput: !prev.showAddInput, title: '' }))\r\n    }\r\n\r\n    onTitleChange = (e) => {\r\n        this.setState({\r\n            title: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n\r\n    onEnterPress = (e) => {\r\n        if (e.key === 'Enter' && this.state.title) {\r\n            this.props.onEnter && this.props.onEnter(this.state.title)\r\n            this.onClickAdd()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div id=\"navbar\">\r\n                {this.getTitleAndVersion()}\r\n                <div className='nav-right'>\r\n                    {\r\n                        this.state.showAddInput ?\r\n                            <div className='add-board'>\r\n                                <input type='text' placeholder='type and press to add dashboard' value={this.state.title} onChange={this.onTitleChange} onKeyPress={this.onEnterPress} />\r\n                                <button className='btn-c red' onClick={this.onClickAdd}>&#x2716;</button>\r\n                            </div>\r\n                            :\r\n                            <button className='btn-c add' onClick={this.onClickAdd}>\r\n                                <span>add  dashboard</span>\r\n                            </button>\r\n                    }\r\n                    {\r\n                        this.props.dashboardList.length ? <select onChange={this.props.onDashboardChange} className='select-list dashboard-list' value={this.props.selectedBoard}>\r\n\r\n                            {\r\n                                this.props.dashboardList\r\n                                    .map((dashboard, i) => <option\r\n                                        key={i}\r\n                                        value={dashboard}>\r\n                                        {dashboard + ' dashboard'}</option>)\r\n                            }\r\n                        </select> : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport './App.css';\nimport { DndProvider } from 'react-dnd'\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport { NavBar, AddCard, List } from './components';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      titleInfo: {\n        title: 'Trello',\n        version: '2.0'\n      },\n      selectedBoard: '',\n      dashboard: {},\n      currentHoverListID: null\n    }\n  }\n\n  componentDidMount() {\n\n    this.getMockData();\n  }\n\n  getMockData = async () => {\n    const data = await fetch(process.env.PUBLIC_URL + (process.env.NODE_ENV === 'development' ? \"\" : \"/\") + 'mock-data.json').then(data => data.json())\n    this.setState((_prev) => ({\n      dashboard: data,\n      selectedBoard: Object.keys(data)[0]\n    }))\n\n  }\n\n  addList = (title) => {\n\n\n    this.setState((prev) => {\n\n      let dashboard = { ...prev.dashboard }\n      let selectedBoard = prev.selectedBoard ? prev.selectedBoard : 'default'\n\n      if (!dashboard[selectedBoard]) {\n        selectedBoard = 'default'\n        dashboard[selectedBoard] = []\n      }\n\n      dashboard[selectedBoard].push({\n        id: new Date().getTime(),\n        title,\n        cards: []\n      })\n\n      return { dashboard, selectedBoard }\n    })\n  }\n\n  deleteList = (id) => {\n    this.setState(prev => {\n\n      let dashboard = { ...prev.dashboard }\n\n      dashboard[prev.selectedBoard] = dashboard[prev.selectedBoard]\n        .filter(eachList => eachList.id !== id)\n\n      return { dashboard }\n    })\n  }\n\n  handleDrop = (cardID, listID) => {\n\n    if (this.state.currentHoverListID && this.state.currentHoverListID !== listID) {\n\n      let dashboard = JSON.parse(JSON.stringify(this.state.dashboard))\n      let lists = dashboard[this.state.selectedBoard]\n\n      let listToRemove = lists.filter(list => list.id === listID)[0]\n      let listToAdd = lists.filter(list => list.id === this.state.currentHoverListID)[0]\n      let removedCard = listToRemove.cards.splice(listToRemove.cards.filter(card => card).map(card => card.id).indexOf(cardID), 1)[0]\n      listToAdd.cards.push(removedCard);\n      listToAdd.cards = listToAdd.cards.filter(card => card)\n      listToRemove.cards = listToRemove.cards.filter(card => card)\n      dashboard[this.state.selectedBoard] = lists\n      this.setState({ dashboard })\n\n    }\n\n  }\n\n  onHoverList = (id) => {\n    if (id && id !== this.state.currentHoverListID) {\n      this.setState({\n        currentHoverListID: id\n      })\n    }\n  }\n\n  onDashboardChange = (e) => {\n    this.setState({\n      selectedBoard: e.target.value\n    })\n  }\n\n  updateDashBoard = (list) => {\n\n    let dashboard = JSON.parse(JSON.stringify(this.state.dashboard))\n    let lists = dashboard[this.state.selectedBoard].map(eachList => {\n      if (eachList.id === list.id)\n        return list\n      return eachList\n    })\n    dashboard[this.state.selectedBoard] = lists\n\n    this.setState({ dashboard })\n\n  }\n\n  onDashBoardTitleSave = (title) => {\n    let dashboard = { ...this.state.dashboard }\n    dashboard[title] = []\n    this.setState({\n      dashboard,\n      selectedBoard: title\n    })\n  }\n\n  deleteBoard = () => {\n    let dashboard = { ...this.state.dashboard }\n    delete dashboard[this.state.selectedBoard]\n    this.setState({\n      dashboard,\n      selectedBoard: Object.keys(dashboard)[0]\n    })\n  }\n\n  render() {\n\n    if (Object.keys(this.state.dashboard).length === 0) {\n      return <></>\n    }\n\n    return (\n      <div className=\"App\" >\n        < NavBar\n          titleInfo={this.state.titleInfo}\n          dashboardList={Object.keys(this.state.dashboard)}\n          onDashboardChange={this.onDashboardChange}\n          selectedBoard={this.state.selectedBoard}\n          onEnter={this.onDashBoardTitleSave}\n\n        />\n        <DndProvider backend={HTML5Backend}>\n          <div className='list-section' >\n            {Object.keys(this.state.dashboard).length > 1 &&\n              <div className='dashboard-delete'>\n                <h2>delete dashboard</h2>\n                <button className='btn-c red' onClick={this.deleteBoard}>&#x2716;</button>\n              </div>\n            }\n            <Scrollbars\n              className=\"scroll\"\n              renderThumbHorizontal={\n                ({ style, ...props }) =>\n                  <div {...props} style={{ ...style, backgroundColor: 'rgb(48, 129, 176)', borderRadius: '3px' }} />\n              }\n            >\n              <div className=\"list-container\">\n                {\n                  this.state.dashboard[this.state.selectedBoard] && this.state.dashboard[this.state.selectedBoard].map((eachList, i) => <List\n                    key={i}\n                    list={eachList}\n                    onHoverList={this.onHoverList}\n                    handleDrop={this.handleDrop}\n                    updateDashBoard={this.updateDashBoard}\n                    onDelete={this.deleteList} />)\n                }\n                <AddCard\n                  addingFor='add a new list...'\n                  onSave={this.addList}\n                />\n              </div>\n            </Scrollbars>\n          </div>\n        </DndProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}