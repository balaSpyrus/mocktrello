{"version":3,"sources":["components/card/addCard.tsx","components/modals/editCardModal.tsx","components/card/card.tsx","components/card/cardList.tsx","components/navbar/navBar.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["AddOne","_ref","isAddingOneFromProps","isAddingOne","onToggle","onSaveFromProps","onSave","addingFor","_useState","useState","_useState2","_slicedToArray","setIsAddignOne","_useState3","_useState4","title","setTitle","useEffect","toggleBtn","prev","_jsxs","className","children","_jsx","type","placeholder","autoFocus","value","onChange","e","target","onKeyPress","key","onClick","undefined","href","EditCardModal","cardFromProps","card","onClose","cloneDeep","setCard","titleIsOpen","setTitleIsOpen","_useState5","_useState6","comment","setComment","_useState7","_useState8","descriptionIsOpen","setDescriptionIsOpen","name","_objectSpread","_defineProperty","Modal","isOpen","onRequestClose","overlayClassName","appElement","document","getElementById","description","priority","Scrollbars","autoHeight","autoHeightMin","autoHeightMax","renderThumbVertical","_ref2","style","props","_objectWithoutProperties","_excluded","backgroundColor","borderRadius","comments","map","i","index","splice","push","Card","deleteCard","expandCard","getTitleColor","classNames","join","Draggable","draggableId","id","_ref3","dragHandleProps","draggableProps","innerRef","isDragging","ref","length","concat","List","listFromProps","list","updateDashBoard","onDelete","setList","isAddingCard","setIsAddingCard","expandedCard","setExpandedCard","addCard","cards","_toConsumableArray","Date","getTime","closeModal","arguments","mutatedList","eachCard","moveCard","dragIndex","hoverIndex","dragCard","filter","dragRef","Droppable","droppableId","_ref4","droppableProps","isDraggingOver","_ref5","onMouseDown","preventDefault","listId","AddCard","NavBar","titleInfo","onEnter","dashboardList","onDashboardChange","selectedBoard","showAddInput","setShowAddInput","Title","useMemo","version","onClickAdd","dashboard","App","setDashboard","setSelectedBoard","getMockData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","next","fetch","process","then","json","sent","Object","keys","stop","apply","addList","mutatedDashboard","currBoard","deleteList","eachList","lists","onCardDrag","useCallback","result","destination","source","_destList","_destination$index","destList","listToMutate","find","Number","cardToMutate","each","_destList2","onDragEnd","DragDropContext","direction","_dashboard$selectedBo","_Fragment","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2e321aaf.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\ninterface Props {\r\n  isAddingOne?: boolean;\r\n  onToggle?: (toggle: boolean) => void;\r\n  onSave?: (title: string) => void;\r\n  addingFor: string;\r\n}\r\n\r\nconst AddOne: React.FC<Props> = ({\r\n  isAddingOne: isAddingOneFromProps,\r\n  onToggle,\r\n  onSave: onSaveFromProps,\r\n  addingFor,\r\n}) => {\r\n  const [isAddingOne, setIsAddignOne] = useState(isAddingOneFromProps);\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setIsAddignOne(isAddingOneFromProps);\r\n  }, [isAddingOneFromProps]);\r\n\r\n  const toggleBtn = () => {\r\n    setIsAddignOne((prev) => !prev);\r\n    onToggle?.(!isAddingOne);\r\n  };\r\n\r\n  const onTitleChange: React.ChangeEventHandler<HTMLInputElement> = (e) =>\r\n    setTitle(e.target.value);\r\n\r\n  const onSave = () => {\r\n    onSaveFromProps?.(title);\r\n    onToggle?.(false);\r\n    setTitle(\"\");\r\n    setIsAddignOne(false);\r\n  };\r\n\r\n  const onEnterPress: React.KeyboardEventHandler<HTMLInputElement> = (e) => {\r\n    if (e.key === \"Enter\" && title) {\r\n      onSave();\r\n    }\r\n  };\r\n\r\n  return isAddingOne ? (\r\n    <div className=\"add-one-mini\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder={addingFor}\r\n        autoFocus\r\n        value={title}\r\n        onChange={onTitleChange}\r\n        onKeyPress={onEnterPress}\r\n      />\r\n      <div>\r\n        <button className=\"btn-c blue\" onClick={title ? onSave : undefined}>\r\n          &#x2714;\r\n        </button>\r\n        <button className=\"btn-c red\" onClick={toggleBtn}>\r\n          &#x2716;\r\n        </button>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <a href=\"/#\" className=\"add-one-element\" onClick={toggleBtn}>\r\n      {addingFor}\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default AddOne;\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport Modal from \"react-modal\";\r\nimport \"./editCardModal.css\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport { CardType } from \"../../types\";\r\n\r\ninterface Props {\r\n  card: CardType;\r\n  onClose: (cardToSave?: CardType) => void;\r\n}\r\n\r\nconst EditCardModal: React.FC<Props> = ({ card: cardFromProps, onClose }) => {\r\n  const [card, setCard] = useState(cloneDeep(cardFromProps));\r\n  const [titleIsOpen, setTitleIsOpen] = useState(false);\r\n  const [comment, setComment] = useState(\"\");\r\n  const [descriptionIsOpen, setDescriptionIsOpen] = useState(false);\r\n\r\n  const deleteComment = (index: number) =>\r\n    setCard((prev) => ({\r\n      ...prev,\r\n      comments: prev.comments.splice(index, 1),\r\n    }));\r\n\r\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) =>\r\n    setComment(e.target.value);\r\n\r\n  const addComment: React.KeyboardEventHandler<HTMLInputElement> = (e) => {\r\n    if (e.key === \"Enter\" && comment) {\r\n      setCard((prev) => ({\r\n        ...prev,\r\n        comment: prev.comments.push(comment),\r\n      }));\r\n      setComment(\"\");\r\n    }\r\n  };\r\n\r\n  const onSave = () => onClose?.(card);\r\n\r\n  const onChange: React.ChangeEventHandler<\r\n    HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\r\n  > = (e) => {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n\r\n    setCard((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={true}\r\n      onRequestClose={() => onClose()}\r\n      className=\"Modal\"\r\n      overlayClassName=\"Overlay\"\r\n      appElement={document.getElementById(\"root\") as HTMLDivElement}\r\n    >\r\n      <div className=\"edit-modal-title\">\r\n        {titleIsOpen ? (\r\n          <input\r\n            type=\"text\"\r\n            className=\"on-edit-modal-title\"\r\n            name=\"title\"\r\n            onChange={onChange}\r\n            value={card.title}\r\n          />\r\n        ) : (\r\n          <h2>{card.title}</h2>\r\n        )}\r\n        <span\r\n          className={titleIsOpen ? \"close\" : \"edit\"}\r\n          onClick={() => setTitleIsOpen((prev) => !prev)}\r\n        ></span>\r\n      </div>\r\n      <div>\r\n        <label className=\"model-label\">description</label>\r\n        <div className=\"card-desc\">\r\n          {descriptionIsOpen ? (\r\n            <textarea\r\n              value={card.description}\r\n              onChange={onChange}\r\n              name=\"description\"\r\n              className=\"edit-text-area\"\r\n            />\r\n          ) : (\r\n            <i>{card.description}</i>\r\n          )}\r\n          <span\r\n            className={descriptionIsOpen ? \"close\" : \"edit\"}\r\n            onClick={() => setDescriptionIsOpen((prev) => !prev)}\r\n          ></span>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <label className=\"model-label\">status</label>\r\n        <select\r\n          value={card.priority}\r\n          name=\"priority\"\r\n          onChange={onChange}\r\n          className=\"select-list status-list\"\r\n        >\r\n          <option value={0}>new</option>\r\n          <option value={1}>investigate</option>\r\n          <option value={2}>in-progress</option>\r\n          <option value={3}>done</option>\r\n          <option value={4}>critical</option>\r\n          <option value={5}>hold</option>\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <label className=\"model-label\">comments</label>\r\n        <div className=\"card-comment-container\">\r\n          <Scrollbars\r\n            className=\"scroll\"\r\n            autoHeight\r\n            autoHeightMin={0}\r\n            autoHeightMax={200}\r\n            renderThumbVertical={({ style, ...props }) => (\r\n              <div\r\n                {...props}\r\n                style={{\r\n                  ...style,\r\n                  backgroundColor: \"rgba(49, 49, 49, 0.4)\",\r\n                  borderRadius: \"3px\",\r\n                }}\r\n              />\r\n            )}\r\n          >\r\n            {card.comments.map((comment, i) => (\r\n              <span className=\"comment\" key={i}>\r\n                <i>{comment}</i>\r\n                <span\r\n                  className=\"comment-delete\"\r\n                  onClick={() => deleteComment(i)}\r\n                >\r\n                  &#x2716;\r\n                </span>\r\n              </span>\r\n            ))}\r\n          </Scrollbars>\r\n          <input\r\n            type=\"text\"\r\n            value={comment}\r\n            className=\"add-comment\"\r\n            placeholder=\"type and press enter to add comment\"\r\n            onChange={onInputChange}\r\n            onKeyPress={addComment}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <button className=\"btn-c blue\" onClick={onSave}>\r\n          &#x2714;\r\n        </button>\r\n        <button className=\"btn-c red\" onClick={() => onClose?.()}>\r\n          &#x2716;\r\n        </button>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EditCardModal;\r\n","import React from \"react\";\r\nimport { CardType } from \"../../types\";\r\nimport \"./card.css\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n\r\ninterface Props {\r\n  index: number;\r\n  listId: number;\r\n  card: CardType;\r\n  expandCard: () => void;\r\n  deleteCard: (id: number) => void;\r\n  moveCard: any;\r\n}\r\n\r\nconst Card: React.FC<Props> = ({ card, deleteCard, expandCard, index }) => {\r\n  const getTitleColor = (priority: number) => {\r\n    let classNames = [\"card-title\"];\r\n\r\n    switch (priority + \"\") {\r\n      case \"1\":\r\n        classNames.push(\"investigate\");\r\n        break;\r\n      case \"2\":\r\n        classNames.push(\"in-progress\");\r\n        break;\r\n      case \"3\":\r\n        classNames.push(\"done\");\r\n        break;\r\n      case \"4\":\r\n        classNames.push(\"critical\");\r\n        break;\r\n      case \"5\":\r\n        classNames.push(\"hold\");\r\n        break;\r\n      default:\r\n        classNames.push(\"new\");\r\n        break;\r\n    }\r\n\r\n    return classNames.join(\" \");\r\n  };\r\n\r\n  return (\r\n    <Draggable draggableId={card.id + \"\"} key={card.id + \"\"} index={index}>\r\n      {({ dragHandleProps, draggableProps, innerRef }, { isDragging }) => (\r\n        <div\r\n          ref={innerRef}\r\n          className={isDragging ? \"card card-drag\" : \"card\"}\r\n          onClick={expandCard}\r\n          {...dragHandleProps}\r\n          {...draggableProps}\r\n        >\r\n          <div className={getTitleColor(card.priority)}>\r\n            <span> {card.title} </span>\r\n            <span onClick={() => deleteCard(card.id)}>&#x2716;</span>\r\n          </div>\r\n          <div className=\"card-comment-count\" title={card.description}>\r\n            {card.comments.length ? (\r\n              <i>{`${card.comments.length} comment(s)`}</i>\r\n            ) : (\r\n              <i>Be the first to comment</i>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { cloneDeep } from \"lodash\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport { CardType, DashBoardDataType } from \"../../types\";\r\nimport EditCardModal from \"../modals/editCardModal\";\r\nimport AddCard from \"./addCard\";\r\nimport Card from \"./card\";\r\nimport \"./cardList.css\";\r\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\r\n\r\ninterface Props {\r\n  index: number;\r\n  list: DashBoardDataType[0][0];\r\n  updateDashBoard: (data: DashBoardDataType[0][0]) => void;\r\n  onDelete: (id: number) => void;\r\n}\r\n\r\nconst List: React.FC<Props> = ({\r\n  list: listFromProps,\r\n  updateDashBoard,\r\n  onDelete,\r\n  index,\r\n}) => {\r\n  const [list, setList] = useState(listFromProps);\r\n  const [isAddingCard, setIsAddingCard] = useState(false);\r\n  const [expandedCard, setExpandedCard] = useState<CardType | null>(null);\r\n\r\n  useEffect(() => {\r\n    listFromProps && setList(listFromProps);\r\n  }, [listFromProps]);\r\n\r\n  const addCard = (title: string) => {\r\n    setList((prev) => ({\r\n      ...prev,\r\n      cards: [\r\n        ...prev.cards,\r\n        {\r\n          id: new Date().getTime(),\r\n          title,\r\n          priority: 0,\r\n          description: \"\",\r\n          comments: [],\r\n        },\r\n      ],\r\n    }));\r\n\r\n    updateDashBoard(list);\r\n  };\r\n\r\n  const closeModal = (card: CardType | null = null) => {\r\n    let mutatedList = cloneDeep(list);\r\n\r\n    if (card) {\r\n      mutatedList.cards = mutatedList.cards.map((eachCard) => {\r\n        if (eachCard.id === card.id) return card;\r\n        return eachCard;\r\n      });\r\n    }\r\n\r\n    setExpandedCard(null);\r\n    updateDashBoard(mutatedList);\r\n  };\r\n\r\n  const moveCard = (dragIndex: number, hoverIndex: number) => {\r\n    let mutatedList = cloneDeep(list);\r\n    const dragCard = mutatedList.cards[dragIndex];\r\n    mutatedList.cards.splice(dragIndex, 1);\r\n    mutatedList.cards.splice(hoverIndex, 0, dragCard);\r\n    updateDashBoard(mutatedList);\r\n  };\r\n\r\n  const deleteCard = (id: number) => {\r\n    let mutatedList = cloneDeep(list);\r\n    mutatedList.cards = mutatedList.cards.filter(\r\n      (eachCard) => eachCard.id !== id\r\n    );\r\n    updateDashBoard(mutatedList);\r\n  };\r\n\r\n  const onToggle = () => setIsAddingCard((prev) => !prev);\r\n\r\n  return (\r\n    <Draggable draggableId={list.id + \"\"} key={list.id + \"\"} index={index}>\r\n      {({ dragHandleProps, draggableProps, innerRef: dragRef }) => (\r\n        <Droppable droppableId={list.id + \"\"} key={list.id + \"\"} type=\"card\">\r\n          {({ innerRef, droppableProps, placeholder }, { isDraggingOver }) => (\r\n            <div\r\n              className={isDraggingOver ? \"list card-cont-drop\" : \"list\"}\r\n              {...draggableProps}\r\n              ref={dragRef}\r\n            >\r\n              <div className=\"title-container\" {...dragHandleProps}>\r\n                <span>{list.title}</span>\r\n                <span className=\"btn-c red\" onClick={() => onDelete(list.id)}>\r\n                  &#x2716;\r\n                </span>\r\n              </div>\r\n              <div\r\n                ref={innerRef}\r\n                {...droppableProps}\r\n                className={\"card-container\"}\r\n              >\r\n                <Scrollbars\r\n                  className=\"scroll\"\r\n                  autoHeight\r\n                  autoHeightMin={0}\r\n                  autoHeightMax={\r\n                    isAddingCard ? \"calc(100vh - 240px)\" : \"calc(100vh - 185px)\"\r\n                  }\r\n                  renderThumbVertical={({ style, ...props }) => (\r\n                    <div\r\n                      {...props}\r\n                      style={{\r\n                        ...style,\r\n                        backgroundColor: \"rgba(49, 49, 49, 0.4)\",\r\n                        borderRadius: \"3px\",\r\n                      }}\r\n                    />\r\n                  )}\r\n                >\r\n                  {!list.cards.length && (\r\n                    <div\r\n                      className=\"no-card\"\r\n                      onMouseDown={(e) => e.preventDefault()}\r\n                    >\r\n                      <i>No Card(s) available</i>\r\n                    </div>\r\n                  )}\r\n                  {list.cards.map((eachCard, i) => (\r\n                    <Card\r\n                      index={i}\r\n                      listId={list.id}\r\n                      deleteCard={deleteCard}\r\n                      expandCard={() => setExpandedCard(eachCard)}\r\n                      moveCard={moveCard}\r\n                      card={eachCard}\r\n                      key={i}\r\n                    />\r\n                  ))}\r\n                  {placeholder}\r\n                </Scrollbars>\r\n              </div>\r\n              <div className=\"btn-container\">\r\n                <AddCard\r\n                  addingFor=\"add a card...\"\r\n                  onSave={addCard}\r\n                  onToggle={onToggle}\r\n                />\r\n              </div>\r\n              {expandedCard && (\r\n                <EditCardModal card={expandedCard} onClose={closeModal} />\r\n              )}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { ChangeEvent, useMemo, useState } from \"react\";\r\nimport \"./nav.css\";\r\nimport { TitleType } from \"../../types\";\r\n\r\ninterface Props {\r\n  titleInfo?: TitleType;\r\n  onEnter?: any;\r\n  dashboardList: string[];\r\n  onDashboardChange: React.ChangeEventHandler<HTMLSelectElement>;\r\n  selectedBoard?: string;\r\n}\r\n\r\nconst NavBar: React.FC<Props> = ({\r\n  titleInfo,\r\n  onEnter,\r\n  dashboardList,\r\n  onDashboardChange,\r\n  selectedBoard,\r\n}) => {\r\n  const [showAddInput, setShowAddInput] = useState(false);\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const Title = useMemo(() => {\r\n    let title = \"Trello\",\r\n      version = \"2.0\";\r\n    if (titleInfo) {\r\n      title = titleInfo.title;\r\n      version = titleInfo.version;\r\n    }\r\n    return (\r\n      <div className=\"nav-title\">\r\n        <span>{title}</span>\r\n        {version && <span>{version}</span>}\r\n      </div>\r\n    );\r\n  }, [titleInfo]);\r\n\r\n  const onClickAdd = () => {\r\n    setShowAddInput((prev) => !prev);\r\n    setTitle(\"\");\r\n  };\r\n\r\n  const onTitleChange = (e: ChangeEvent<HTMLInputElement>) =>\r\n    setTitle(e.target.value);\r\n\r\n  const onEnterPress: React.KeyboardEventHandler<HTMLInputElement> = (e) => {\r\n    if (e.key === \"Enter\" && title) {\r\n      onEnter?.(title);\r\n      onClickAdd();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"navbar\">\r\n      {Title}\r\n      <div className=\"nav-right\">\r\n        {showAddInput ? (\r\n          <div className=\"add-board\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"type and press to add dashboard\"\r\n              value={title}\r\n              onChange={onTitleChange}\r\n              onKeyPress={onEnterPress}\r\n            />\r\n            <button className=\"btn-c red\" onClick={onClickAdd}>\r\n              &#x2716;\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <button className=\"btn-c add\" onClick={onClickAdd}>\r\n            <span>add dashboard</span>\r\n          </button>\r\n        )}\r\n        {dashboardList.length ? (\r\n          <select\r\n            onChange={onDashboardChange}\r\n            className=\"select-list dashboard-list\"\r\n            value={selectedBoard}\r\n          >\r\n            {dashboardList.map((dashboard, i) => (\r\n              <option key={i} value={dashboard}>\r\n                {dashboard + \" dashboard\"}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { cloneDeep } from \"lodash\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport {\n  DragDropContext,\n  DropResult,\n  Droppable,\n  OnDragEndResponder,\n} from \"react-beautiful-dnd\";\nimport \"./App.css\";\nimport { AddCard, List, NavBar } from \"./components\";\nimport { CardType, DashBoardDataType, TitleType } from \"./types\";\n\nconst App: React.FC = () => {\n  const [titleInfo] = useState<TitleType>({\n    title: \"Trello\",\n    version: \"2.0\",\n  });\n  const [dashboard, setDashboard] = useState<DashBoardDataType>({});\n  const [selectedBoard, setSelectedBoard] = useState(\"\");\n\n  const getMockData = async () => {\n    const data = await fetch(process.env.PUBLIC_URL + \"/mock-data.json\").then(\n      (data) => data.json()\n    );\n    setDashboard(data);\n    setSelectedBoard(Object.keys(data)[0]);\n  };\n\n  const addList = (title: string) => {\n    const mutatedDashboard = cloneDeep(dashboard);\n    let currBoard = selectedBoard ?? \"default\";\n\n    if (!mutatedDashboard[currBoard]) {\n      currBoard = \"default\";\n      mutatedDashboard[currBoard] = [];\n    }\n\n    mutatedDashboard[currBoard].push({\n      id: new Date().getTime(),\n      title,\n      cards: [],\n    });\n\n    setDashboard(mutatedDashboard);\n    setSelectedBoard(currBoard);\n  };\n\n  const deleteList = (id: number) =>\n    setDashboard((prev) => ({\n      ...prev,\n      [selectedBoard]: prev[selectedBoard].filter(\n        (eachList) => eachList.id !== id\n      ),\n    }));\n\n  const onDashboardChange: React.ChangeEventHandler<HTMLSelectElement> = (e) =>\n    setSelectedBoard(e.target.value);\n\n  const updateDashBoard = (list: DashBoardDataType[0][0]) => {\n    let mutatedDashboard = cloneDeep(dashboard);\n    let lists = mutatedDashboard[selectedBoard].map((eachList) => {\n      if (eachList.id === list.id) return list;\n      return eachList;\n    });\n    mutatedDashboard[selectedBoard] = lists;\n    setDashboard(mutatedDashboard);\n  };\n\n  const onDashBoardTitleSave = (title: string) => {\n    let mutatedDashboard = cloneDeep(dashboard);\n    mutatedDashboard[title] = [];\n    setDashboard(mutatedDashboard);\n    setSelectedBoard(title);\n  };\n\n  const deleteBoard = () => {\n    let mutatedDashboard = cloneDeep(dashboard);\n    delete mutatedDashboard[selectedBoard];\n    setDashboard(mutatedDashboard);\n    setSelectedBoard(Object.keys(mutatedDashboard)[0]);\n  };\n\n  const onCardDrag = useCallback(\n    (result: DropResult) => {\n      const { destination, source, draggableId } = result;\n\n      setDashboard((prev) => {\n        let destList: DashBoardDataType[0][0] | undefined = undefined;\n        const listToMutate = prev[selectedBoard].find(\n          ({ id }) => id === Number(source.droppableId)\n        );\n        const cardToMutate = listToMutate?.cards.find(\n          ({ id }) => id === Number(draggableId)\n        );\n\n        listToMutate?.cards.splice(source.index, 1);\n\n        if (destination?.droppableId === source.droppableId) {\n          listToMutate?.cards.splice(\n            destination.index,\n            0,\n            cardToMutate as CardType\n          );\n        } else {\n          destList = prev[selectedBoard].find(\n            ({ id }) => id === Number(destination?.droppableId)\n          );\n\n          destList?.cards.splice(\n            destination?.index ?? 0,\n            0,\n            cardToMutate as CardType\n          );\n        }\n        return {\n          ...prev,\n          [selectedBoard]: prev[selectedBoard].map((each) =>\n            each.id === listToMutate?.id\n              ? listToMutate\n              : destList?.id === each.id\n              ? destList\n              : each\n          ),\n        };\n      });\n    },\n    [selectedBoard]\n  );\n\n  const onDragEnd: OnDragEndResponder = useCallback(\n    (result) => {\n      const { destination, source, type } = result;\n      if (!destination) {\n        return;\n      }\n\n      if (\n        destination.droppableId === source.droppableId &&\n        destination.index === source.index\n      ) {\n        return;\n      }\n\n      if (type === \"card\") {\n        onCardDrag(result);\n      }\n    },\n    [onCardDrag]\n  );\n\n  useEffect(() => {\n    getMockData();\n  }, []);\n\n  if (Object.keys(dashboard).length === 0 && !selectedBoard) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"App\">\n      <NavBar\n        titleInfo={titleInfo}\n        dashboardList={Object.keys(dashboard)}\n        onDashboardChange={onDashboardChange}\n        selectedBoard={selectedBoard}\n        onEnter={onDashBoardTitleSave}\n      />\n      <div className=\"list-section\">\n        {Object.keys(dashboard).length > 1 && (\n          <div className=\"dashboard-delete\">\n            <h2>delete dashboard</h2>\n            <button className=\"btn-c red\" onClick={deleteBoard}>\n              &#x2716;\n            </button>\n          </div>\n        )}\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"container\" direction=\"horizontal\" type=\"list\">\n            {({ droppableProps, placeholder, innerRef }) => (\n              <div\n                className=\"list-container\"\n                ref={innerRef}\n                {...droppableProps}\n              >\n                {dashboard[selectedBoard]?.map((eachList, i) => (\n                  <List\n                    index={i}\n                    key={i}\n                    list={eachList}\n                    updateDashBoard={updateDashBoard}\n                    onDelete={deleteList}\n                  />\n                ))}\n                {placeholder}\n                <AddCard addingFor=\"add a new list...\" onSave={addList} />\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}